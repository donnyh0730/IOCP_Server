[1] 
#pragma pack(1) 
/* 코드 */ 
#pragma pack(0)

Serialization 을 하겠다는 컴파일러 전처리기 인데 저런식으로 코드를 감싸면 c++컴파일러가 해당 클래스 또는 구조체를 Serialization 해준다. 

- 여기서 Serialization이란 ? : 64비트 운영 체제에서는 int32같이 4바이트 짜리 데이터를 구조체에 넣으면, 주소체계가 64비트 환경으로인해 8바이트 단위의 접근이 훨씬 빠르기 때문에 컴파일러가 구조체 안에 더미데이터를 넣음으로써 구조체의 사이즈가 실제 코드와는 다르게 된다. 따라서 환경(운영체제 , 랭귀지등)에 따른 데이터필드의 접근이 실제구성된 코드와 달라질 수 있다. 그러므로 정말로 데이터 사이즈만큼으로 구성해달라는 Serialization 키워드 또는 전처리를 통해 서버환경과 클라이언트 환경간의 데이터 파싱의 유틸리티성을 보장 받을 수 있게 한다. 

struct S_test
{
	int32 id;
	//(int32 dummy); //컴파일러가 더미 데이터를 사용해서 없는 데이터를 넣어서 8바이트 단위로 만든다!
	int64 HP;
	int32 Attack;
} 

#pragma pack(1)
struct S_test
{
	int32 id;
	//(		); //전처리기 지시를 통해 더미를 넣지 않게된다.
	int64 HP;
	int32 Attack;
} 
#pragma pack(0)